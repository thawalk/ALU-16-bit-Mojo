module boolean (
    // Inputs
    input a[16],
    input b[16],
    input alufn[6], 
    
    //Output
    output boolean[16]
    
  ) {

  always {
  boolean[15:0] = a[15:0];                                      // else, output = a
    
  if (alufn[3]==1 && alufn[2]==0 && alufn[1]==0 && alufn[0]==0 ){  // AND
    boolean[15:0] = a[15:0] & b[15:0];
    }
  if (alufn[3]==1 && alufn[2]==1 && alufn[1]==1 && alufn[0]==0 ){ // OR  
    boolean[15:0] = a[15:0] | b[15:0];
    }
  if (alufn[3]==0 && alufn[2]==1 && alufn[1]==1 && alufn[0]==0 ){ // XOR 
    boolean[15:0] = a[15:0] ^ b[15:0];
    }
  if (alufn[3]==0 && alufn[2]==1 && alufn[1]==1 && alufn[0]==1 ){ // NAND
    boolean[15:0] = ~(a[15:0] & b[15:0]);
    }
  if (alufn[3]==0 && alufn[2]==0 && alufn[1]==0 && alufn[0]==1 ){ // NOR
    boolean[15:0] = ~(a[15:0] | b[15:0]);
    }   
  if (alufn[3]==1 && alufn[2]==0 && alufn[1]==0 && alufn[0]==1 ){ // XNOR
     boolean[15:0] = ~(a[15:0] ^ b[15:0]);
    }
  if (alufn[3]==1 && alufn[2]==0 && alufn[1]==1 && alufn[0]==0 ){ // A
    boolean[15:0] = a[15:0];
    }
  if (alufn[3]==0 && alufn[2]==1 && alufn[1]==0 && alufn[0]==1 ){ // A inverted          
    boolean[15:0] = ~a[15:0];                               
    }
  if (alufn[3]==0 && alufn[2]==0 && alufn[1]==1 && alufn[0]==1 ){ // B inverted
    boolean[15:0] = ~b[15:0];                  
    }
  }
}
